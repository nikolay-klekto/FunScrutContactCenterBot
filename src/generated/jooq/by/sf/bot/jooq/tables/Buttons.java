/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables;


import by.sf.bot.jooq.ContactCenterBot;
import by.sf.bot.jooq.Keys;
import by.sf.bot.jooq.tables.records.ButtonsRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица для хранения информации о кнопках меню
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Buttons extends TableImpl<ButtonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>contact_center_bot.buttons</code>
     */
    public static final Buttons BUTTONS = new Buttons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ButtonsRecord> getRecordType() {
        return ButtonsRecord.class;
    }

    /**
     * The column <code>contact_center_bot.buttons.button_id</code>. Уникальный
     * идентификатор кнопки
     */
    public final TableField<ButtonsRecord, Integer> BUTTON_ID = createField(DSL.name("button_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Уникальный идентификатор кнопки");

    /**
     * The column <code>contact_center_bot.buttons.menu_id</code>. Идентификатор
     * меню, к которому относится кнопка
     */
    public final TableField<ButtonsRecord, Integer> MENU_ID = createField(DSL.name("menu_id"), SQLDataType.INTEGER, this, "Идентификатор меню, к которому относится кнопка");

    /**
     * The column <code>contact_center_bot.buttons.label</code>. Надпись на
     * кнопке
     */
    public final TableField<ButtonsRecord, String> LABEL = createField(DSL.name("label"), SQLDataType.VARCHAR, this, "Надпись на кнопке");

    /**
     * The column <code>contact_center_bot.buttons.action_type</code>. Тип
     * действия кнопки (например, URL, команда)
     */
    public final TableField<ButtonsRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.VARCHAR, this, "Тип действия кнопки (например, URL, команда)");

    /**
     * The column <code>contact_center_bot.buttons.action_data</code>. Данные
     * действия кнопки (например, URL или текст команды)
     */
    public final TableField<ButtonsRecord, String> ACTION_DATA = createField(DSL.name("action_data"), SQLDataType.VARCHAR, this, "Данные действия кнопки (например, URL или текст команды)");

    /**
     * The column <code>contact_center_bot.buttons.date_created</code>. Дата
     * создания записи
     */
    public final TableField<ButtonsRecord, LocalDate> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATE, this, "Дата создания записи");

    /**
     * The column <code>contact_center_bot.buttons.position</code>.
     */
    public final TableField<ButtonsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER, this, "");

    private Buttons(Name alias, Table<ButtonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Buttons(Name alias, Table<ButtonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для хранения информации о кнопках меню"), TableOptions.table());
    }

    /**
     * Create an aliased <code>contact_center_bot.buttons</code> table reference
     */
    public Buttons(String alias) {
        this(DSL.name(alias), BUTTONS);
    }

    /**
     * Create an aliased <code>contact_center_bot.buttons</code> table reference
     */
    public Buttons(Name alias) {
        this(alias, BUTTONS);
    }

    /**
     * Create a <code>contact_center_bot.buttons</code> table reference
     */
    public Buttons() {
        this(DSL.name("buttons"), null);
    }

    public <O extends Record> Buttons(Table<O> child, ForeignKey<O, ButtonsRecord> key) {
        super(child, key, BUTTONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ContactCenterBot.CONTACT_CENTER_BOT;
    }

    @Override
    public Identity<ButtonsRecord, Integer> getIdentity() {
        return (Identity<ButtonsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ButtonsRecord> getPrimaryKey() {
        return Keys.BUTTONS_PKEY;
    }

    @Override
    public Buttons as(String alias) {
        return new Buttons(DSL.name(alias), this);
    }

    @Override
    public Buttons as(Name alias) {
        return new Buttons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Buttons rename(String name) {
        return new Buttons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Buttons rename(Name name) {
        return new Buttons(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, LocalDate, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
