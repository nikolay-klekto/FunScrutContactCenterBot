/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables;


import by.sf.bot.jooq.ContactCenterBot;
import by.sf.bot.jooq.Keys;
import by.sf.bot.jooq.tables.records.MainBotInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MainBotInfo extends TableImpl<MainBotInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>contact_center_bot.main_bot_info</code>
     */
    public static final MainBotInfo MAIN_BOT_INFO = new MainBotInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MainBotInfoRecord> getRecordType() {
        return MainBotInfoRecord.class;
    }

    /**
     * The column <code>contact_center_bot.main_bot_info.id_info</code>.
     */
    public final TableField<MainBotInfoRecord, Integer> ID_INFO = createField(DSL.name("id_info"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>contact_center_bot.main_bot_info.key</code>.
     */
    public final TableField<MainBotInfoRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>contact_center_bot.main_bot_info.value</code>.
     */
    public final TableField<MainBotInfoRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR, this, "");

    private MainBotInfo(Name alias, Table<MainBotInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private MainBotInfo(Name alias, Table<MainBotInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>contact_center_bot.main_bot_info</code> table
     * reference
     */
    public MainBotInfo(String alias) {
        this(DSL.name(alias), MAIN_BOT_INFO);
    }

    /**
     * Create an aliased <code>contact_center_bot.main_bot_info</code> table
     * reference
     */
    public MainBotInfo(Name alias) {
        this(alias, MAIN_BOT_INFO);
    }

    /**
     * Create a <code>contact_center_bot.main_bot_info</code> table reference
     */
    public MainBotInfo() {
        this(DSL.name("main_bot_info"), null);
    }

    public <O extends Record> MainBotInfo(Table<O> child, ForeignKey<O, MainBotInfoRecord> key) {
        super(child, key, MAIN_BOT_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ContactCenterBot.CONTACT_CENTER_BOT;
    }

    @Override
    public Identity<MainBotInfoRecord, Integer> getIdentity() {
        return (Identity<MainBotInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MainBotInfoRecord> getPrimaryKey() {
        return Keys.MAIN_BOT_INFO_PKEY;
    }

    @Override
    public MainBotInfo as(String alias) {
        return new MainBotInfo(DSL.name(alias), this);
    }

    @Override
    public MainBotInfo as(Name alias) {
        return new MainBotInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MainBotInfo rename(String name) {
        return new MainBotInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MainBotInfo rename(Name name) {
        return new MainBotInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
